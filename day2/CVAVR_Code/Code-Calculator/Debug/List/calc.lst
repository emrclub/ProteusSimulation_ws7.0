
AVRASM ver. 2.1.30  C:\Users\Damodar Mahto\Desktop\Workshop\Atmel Studio\Code-Calculator\Debug\List\calc.asm Sat Sep 02 13:20:22 2017

                 
                 
                 ;CodeVisionAVR C Compiler V3.24 Evaluation
                 ;(C) Copyright 1998-2015 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c01c      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _0x2020060:
C:\Users\Damodar Mahto\Desktop\Workshop\Atmel Studio\Code-Calculator\Debug\List\calc.asm(1120): warning: .cseg .db misalignment - padding zero byte
000013 0001      	.DB  0x1
                 _0x2020000:
000014 4e2d
000015 4e41
000016 4900
000017 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Damodar Mahto\Desktop\Workshop\Atmel Studio\Code-Calculator\Debug\List\calc.asm(1123): warning: .cseg .db misalignment - padding zero byte
000018 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000019 0001      	.DW  0x01
00001a 0160      	.DW  __seed_G101
00001b 0026      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00001c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00001d 94f8      	CLI
00001e 27ee      	CLR  R30
00001f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000020 e0f1      	LDI  R31,1
000021 bffb      	OUT  GICR,R31
000022 bfeb      	OUT  GICR,R30
000023 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000024 e08d      	LDI  R24,(14-2)+1
000025 e0a2      	LDI  R26,2
000026 27bb      	CLR  R27
                 __CLEAR_REG:
000027 93ed      	ST   X+,R30
000028 958a      	DEC  R24
000029 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00002a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00002b e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00002c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00002d 93ed      	ST   X+,R30
00002e 9701      	SBIW R24,1
00002f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000030 e3e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000031 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000032 9185      	LPM  R24,Z+
000033 9195      	LPM  R25,Z+
000034 9700      	SBIW R24,0
000035 f061      	BREQ __GLOBAL_INI_END
000036 91a5      	LPM  R26,Z+
000037 91b5      	LPM  R27,Z+
000038 9005      	LPM  R0,Z+
000039 9015      	LPM  R1,Z+
00003a 01bf      	MOVW R22,R30
00003b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00003c 9005      	LPM  R0,Z+
00003d 920d      	ST   X+,R0
00003e 9701      	SBIW R24,1
00003f f7e1      	BRNE __GLOBAL_INI_LOOP
000040 01fb      	MOVW R30,R22
000041 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000042 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000043 bfed      	OUT  SPL,R30
000044 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000045 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000046 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000047 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000048 c0a2      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <mega8.h>
                 ;#include <math.h>
                 ;#define F_XTAL 12000000L
                 ;
                 ;#define E PORTC.0           //enable pin of LCD
                 ;#define RS PORTC.1          //Register Select pin of LCD
                 ;
                 ;#define RowA PORTD.0        //to send the data to keypad
                 ;#define RowB PORTD.1
                 ;#define RowC PORTD.2
                 ;#define RowD PORTD.3
                 ;
                 ;#define Col1 PIND.4        //to receive the data from keypad
                 ;#define Col2 PIND.5
                 ;#define Col3 PIND.6
                 ;#define Col4 PIND.7
                 ;
                 ;void cmd(char a)
                 ; 0000 0015 {
                 
                 	.CSEG
                 _cmd:
                 ; .FSTART _cmd
                 ; 0000 0016     E=1;
000049 931a      	ST   -Y,R17
00004a 2f1a      	MOV  R17,R26
                 ;	a -> R17
00004b 9aa8      	SBI  0x15,0
                 ; 0000 0017     RS=0;
00004c 98a9      	CBI  0x15,1
                 ; 0000 0018     PORTB=a;
00004d d0c3      	RCALL SUBOPT_0x0
                 ; 0000 0019     delay_ms(5);
                 ; 0000 001A     E=0;
                 ; 0000 001B     delay_ms(5);
                 ; 0000 001C }
00004e c09a      	RJMP _0x2080001
                 ; .FEND
                 ;
                 ;void lcd1(char b)
                 ; 0000 001F {
                 _lcd1:
                 ; .FSTART _lcd1
                 ; 0000 0020     E=1;
00004f 931a      	ST   -Y,R17
000050 2f1a      	MOV  R17,R26
                 ;	b -> R17
000051 9aa8      	SBI  0x15,0
                 ; 0000 0021     RS=1;
000052 9aa9      	SBI  0x15,1
                 ; 0000 0022     PORTB =b;
000053 d0bd      	RCALL SUBOPT_0x0
                 ; 0000 0023     delay_ms(5);
                 ; 0000 0024     E=0;
                 ; 0000 0025     delay_ms(5);
                 ; 0000 0026 }
000054 c094      	RJMP _0x2080001
                 ; .FEND
                 ;
                 ;void string1(char *str)
                 ; 0000 0029 {
                 ; 0000 002A      while(*str!='\0')
                 ;	*str -> R16,R17
                 ; 0000 002B      {
                 ; 0000 002C       lcd1(*str);
                 ; 0000 002D       str++;
                 ; 0000 002E      }
                 ; 0000 002F }
                 ;
                 ;void init_LCD()
                 ; 0000 0032 {
                 _init_LCD:
                 ; .FSTART _init_LCD
                 ; 0000 0033 
                 ; 0000 0034   cmd(0x38);        //LCD initialization
000055 e3a8      	LDI  R26,LOW(56)
000056 dff2      	RCALL _cmd
                 ; 0000 0035   cmd(0x0c);        //display on cursor off
000057 e0ac      	LDI  R26,LOW(12)
000058 dff0      	RCALL _cmd
                 ; 0000 0036   cmd(0x01);        //clear display screen
000059 d0bf      	RCALL SUBOPT_0x1
                 ; 0000 0037   cmd(0x06);        //shift
00005a e0a6      	LDI  R26,LOW(6)
00005b dfed      	RCALL _cmd
                 ; 0000 0038   cmd(0x02);        //return to home
00005c e0a2      	LDI  R26,LOW(2)
00005d dfeb      	RCALL _cmd
                 ; 0000 0039 }
00005e 9508      	RET
                 ; .FEND
                 ;
                 ;void delay(int a)
                 ; 0000 003C {
                 ; 0000 003D   int i;
                 ; 0000 003E   for(i=0;i<a;i++);
                 ;	a -> R18,R19
                 ;	i -> R16,R17
                 ; 0000 003F }
                 ;
                 ;char READ_SWITCHES(void)
                 ; 0000 0042 {
                 _READ_SWITCHES:
                 ; .FSTART _READ_SWITCHES
                 ; 0000 0043     RowA = 0; RowB = 1; RowC = 1; RowD = 1;     //Test Row A
00005f 9890      	CBI  0x12,0
000060 9a91      	SBI  0x12,1
000061 9a92      	SBI  0x12,2
000062 9a93      	SBI  0x12,3
                 ; 0000 0044     if (Col1 == 0) { delay_ms(10); while (Col1==0); return '7'; }
000063 9984      	SBIC 0x10,4
000064 c005      	RJMP _0x1D
000065 d0b5      	RCALL SUBOPT_0x2
                 _0x1E:
000066 9b84      	SBIS 0x10,4
000067 cffe      	RJMP _0x1E
000068 e3e7      	LDI  R30,LOW(55)
000069 9508      	RET
                 ; 0000 0045     if (Col2 == 0) { delay_ms(10); while (Col2==0); return '8'; }
                 _0x1D:
00006a 9985      	SBIC 0x10,5
00006b c005      	RJMP _0x21
00006c d0ae      	RCALL SUBOPT_0x2
                 _0x22:
00006d 9b85      	SBIS 0x10,5
00006e cffe      	RJMP _0x22
00006f e3e8      	LDI  R30,LOW(56)
000070 9508      	RET
                 ; 0000 0046     if (Col3 == 0) { delay_ms(10); while (Col3==0); return '9'; }
                 _0x21:
000071 9986      	SBIC 0x10,6
000072 c005      	RJMP _0x25
000073 d0a7      	RCALL SUBOPT_0x2
                 _0x26:
000074 9b86      	SBIS 0x10,6
000075 cffe      	RJMP _0x26
000076 e3e9      	LDI  R30,LOW(57)
000077 9508      	RET
                 ; 0000 0047     if (Col4 == 0) { delay_ms(10); while (Col4==0); return '/'; }
                 _0x25:
000078 9987      	SBIC 0x10,7
000079 c005      	RJMP _0x29
00007a d0a0      	RCALL SUBOPT_0x2
                 _0x2A:
00007b 9b87      	SBIS 0x10,7
00007c cffe      	RJMP _0x2A
00007d e2ef      	LDI  R30,LOW(47)
00007e 9508      	RET
                 ; 0000 0048 
                 ; 0000 0049     RowA = 1; RowB = 0; RowC = 1; RowD = 1;     //Test Row B
                 _0x29:
00007f 9a90      	SBI  0x12,0
000080 9891      	CBI  0x12,1
000081 9a92      	SBI  0x12,2
000082 9a93      	SBI  0x12,3
                 ; 0000 004A     if (Col1 == 0) { delay_ms(10); while (Col1==0); return '4'; }
000083 9984      	SBIC 0x10,4
000084 c005      	RJMP _0x35
000085 d095      	RCALL SUBOPT_0x2
                 _0x36:
000086 9b84      	SBIS 0x10,4
000087 cffe      	RJMP _0x36
000088 e3e4      	LDI  R30,LOW(52)
000089 9508      	RET
                 ; 0000 004B     if (Col2 == 0) { delay_ms(10); while (Col2==0); return '5'; }
                 _0x35:
00008a 9985      	SBIC 0x10,5
00008b c005      	RJMP _0x39
00008c d08e      	RCALL SUBOPT_0x2
                 _0x3A:
00008d 9b85      	SBIS 0x10,5
00008e cffe      	RJMP _0x3A
00008f e3e5      	LDI  R30,LOW(53)
000090 9508      	RET
                 ; 0000 004C     if (Col3 == 0) { delay_ms(10); while (Col3==0); return '6'; }
                 _0x39:
000091 9986      	SBIC 0x10,6
000092 c005      	RJMP _0x3D
000093 d087      	RCALL SUBOPT_0x2
                 _0x3E:
000094 9b86      	SBIS 0x10,6
000095 cffe      	RJMP _0x3E
000096 e3e6      	LDI  R30,LOW(54)
000097 9508      	RET
                 ; 0000 004D     if (Col4 == 0) { delay_ms(10); while (Col4==0); return 'x'; }
                 _0x3D:
000098 9987      	SBIC 0x10,7
000099 c005      	RJMP _0x41
00009a d080      	RCALL SUBOPT_0x2
                 _0x42:
00009b 9b87      	SBIS 0x10,7
00009c cffe      	RJMP _0x42
00009d e7e8      	LDI  R30,LOW(120)
00009e 9508      	RET
                 ; 0000 004E 
                 ; 0000 004F     RowA = 1; RowB = 1; RowC = 0; RowD = 1;     //Test Row C
                 _0x41:
00009f 9a90      	SBI  0x12,0
0000a0 9a91      	SBI  0x12,1
0000a1 9892      	CBI  0x12,2
0000a2 9a93      	SBI  0x12,3
                 ; 0000 0050     if (Col1 == 0) { delay_ms(10); while (Col1==0); return '1'; }
0000a3 9984      	SBIC 0x10,4
0000a4 c005      	RJMP _0x4D
0000a5 d075      	RCALL SUBOPT_0x2
                 _0x4E:
0000a6 9b84      	SBIS 0x10,4
0000a7 cffe      	RJMP _0x4E
0000a8 e3e1      	LDI  R30,LOW(49)
0000a9 9508      	RET
                 ; 0000 0051     if (Col2 == 0) { delay_ms(10); while (Col2==0); return '2'; }
                 _0x4D:
0000aa 9985      	SBIC 0x10,5
0000ab c005      	RJMP _0x51
0000ac d06e      	RCALL SUBOPT_0x2
                 _0x52:
0000ad 9b85      	SBIS 0x10,5
0000ae cffe      	RJMP _0x52
0000af e3e2      	LDI  R30,LOW(50)
0000b0 9508      	RET
                 ; 0000 0052     if (Col3 == 0) { delay_ms(10); while (Col3==0); return '3'; }
                 _0x51:
0000b1 9986      	SBIC 0x10,6
0000b2 c005      	RJMP _0x55
0000b3 d067      	RCALL SUBOPT_0x2
                 _0x56:
0000b4 9b86      	SBIS 0x10,6
0000b5 cffe      	RJMP _0x56
0000b6 e3e3      	LDI  R30,LOW(51)
0000b7 9508      	RET
                 ; 0000 0053     if (Col4 == 0) { delay_ms(10); while (Col4==0); return '-'; }
                 _0x55:
0000b8 9987      	SBIC 0x10,7
0000b9 c005      	RJMP _0x59
0000ba d060      	RCALL SUBOPT_0x2
                 _0x5A:
0000bb 9b87      	SBIS 0x10,7
0000bc cffe      	RJMP _0x5A
0000bd e2ed      	LDI  R30,LOW(45)
0000be 9508      	RET
                 ; 0000 0054 
                 ; 0000 0055     RowA = 1; RowB = 1; RowC = 1; RowD = 0;     //Test Row D
                 _0x59:
0000bf 9a90      	SBI  0x12,0
0000c0 9a91      	SBI  0x12,1
0000c1 9a92      	SBI  0x12,2
0000c2 9893      	CBI  0x12,3
                 ; 0000 0056     if (Col1 == 0) { delay_ms(10); while (Col1==0); return 'C'; }
0000c3 9984      	SBIC 0x10,4
0000c4 c005      	RJMP _0x65
0000c5 d055      	RCALL SUBOPT_0x2
                 _0x66:
0000c6 9b84      	SBIS 0x10,4
0000c7 cffe      	RJMP _0x66
0000c8 e4e3      	LDI  R30,LOW(67)
0000c9 9508      	RET
                 ; 0000 0057     if (Col2 == 0) { delay_ms(10); while (Col2==0); return '0'; }
                 _0x65:
0000ca 9985      	SBIC 0x10,5
0000cb c005      	RJMP _0x69
0000cc d04e      	RCALL SUBOPT_0x2
                 _0x6A:
0000cd 9b85      	SBIS 0x10,5
0000ce cffe      	RJMP _0x6A
0000cf e3e0      	LDI  R30,LOW(48)
0000d0 9508      	RET
                 ; 0000 0058     if (Col3 == 0) { delay_ms(10); while (Col3==0); return '='; }
                 _0x69:
0000d1 9986      	SBIC 0x10,6
0000d2 c005      	RJMP _0x6D
0000d3 d047      	RCALL SUBOPT_0x2
                 _0x6E:
0000d4 9b86      	SBIS 0x10,6
0000d5 cffe      	RJMP _0x6E
0000d6 e3ed      	LDI  R30,LOW(61)
0000d7 9508      	RET
                 ; 0000 0059     if (Col4 == 0) { delay_ms(10); while (Col4==0); return '+'; }
                 _0x6D:
0000d8 9987      	SBIC 0x10,7
0000d9 c005      	RJMP _0x71
0000da d040      	RCALL SUBOPT_0x2
                 _0x72:
0000db 9b87      	SBIS 0x10,7
0000dc cffe      	RJMP _0x72
0000dd e2eb      	LDI  R30,LOW(43)
0000de 9508      	RET
                 ; 0000 005A 
                 ; 0000 005B     return 'n';               // Means no key has been pressed
                 _0x71:
0000df e6ee      	LDI  R30,LOW(110)
0000e0 9508      	RET
                 ; 0000 005C }
                 ; .FEND
                 ;
                 ;
                 ;char get_key(void)           //get key from user
                 ; 0000 0060 {
                 _get_key:
                 ; .FSTART _get_key
                 ; 0000 0061     char key = 'n';              //assume no key pressed
                 ; 0000 0062 
                 ; 0000 0063     while(key=='n')              //wait untill a key is pressed
0000e1 931a      	ST   -Y,R17
                 ;	key -> R17
0000e2 e61e      	LDI  R17,110
                 _0x75:
0000e3 361e      	CPI  R17,110
0000e4 f419      	BRNE _0x77
                 ; 0000 0064     {
                 ; 0000 0065       key = READ_SWITCHES();   //scan the keys again and again
0000e5 df79      	RCALL _READ_SWITCHES
0000e6 2f1e      	MOV  R17,R30
                 ; 0000 0066     }
0000e7 cffb      	RJMP _0x75
                 _0x77:
                 ; 0000 0067     return key;                  //when key pressed then return its value
0000e8 2fe1      	MOV  R30,R17
                 _0x2080001:
0000e9 9119      	LD   R17,Y+
0000ea 9508      	RET
                 ; 0000 0068 }
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;char IsOperator(char ch)
                 ; 0000 006E {
                 ; 0000 006F   if(ch == '*' || ch=='+' || ch=='/' || ch=='-')
                 ;	ch -> R17
                 ; 0000 0070     return 1;
                 ; 0000 0071   else
                 ; 0000 0072     return '\0';
                 ; 0000 0073 }
                 ;
                 ;char IsDigit(char ch)
                 ; 0000 0076 {
                 ; 0000 0077   if(ch<=48 && ch<=57)
                 ;	ch -> R17
                 ; 0000 0078    return 1;
                 ; 0000 0079   else
                 ; 0000 007A    return '\0';
                 ; 0000 007B }
                 ;
                 ;char IsClear(char ch)
                 ; 0000 007E {
                 ; 0000 007F   if(ch=='C')
                 ;	ch -> R17
                 ; 0000 0080    return 1;
                 ; 0000 0081   else
                 ; 0000 0082    return '\0';
                 ; 0000 0083 }
                 ;
                 ;void Calculate(int op1, int op2, char Operation)
                 ; 0000 0086 {
                 ; 0000 0087    int res;
                 ; 0000 0088    char pos = 0xCE;
                 ; 0000 0089    if(Operation == '+')
                 ;	op1 -> Y+8
                 ;	op2 -> R20,R21
                 ;	Operation -> R18
                 ;	res -> R16,R17
                 ;	pos -> R19
                 ; 0000 008A     res = op1+op2;
                 ; 0000 008B    else if(Operation == '-')
                 ; 0000 008C     res = op1-op2;
                 ; 0000 008D    else if(Operation == '*')
                 ; 0000 008E     res = op1*op2;
                 ; 0000 008F    else if(Operation == '/')
                 ; 0000 0090     {
                 ; 0000 0091       float res1 = (1.0)*(((1.0)*op1)/((1.0)*(op2)));
                 ; 0000 0092       res = res1;
                 ;	op1 -> Y+12
                 ;	res1 -> Y+0
                 ; 0000 0093     }
                 ; 0000 0094 
                 ; 0000 0095    else return;
                 ; 0000 0096 
                 ; 0000 0097    cmd(pos);
                 ; 0000 0098 
                 ; 0000 0099    if(res==0)
                 ; 0000 009A    {
                 ; 0000 009B      lcd1('0');
                 ; 0000 009C    }
                 ; 0000 009D 
                 ; 0000 009E    while(res!=0)
                 ; 0000 009F    {
                 ; 0000 00A0      lcd1(res%10 + '0');
                 ; 0000 00A1      pos = pos - 1;
                 ; 0000 00A2      res = res/10;
                 ; 0000 00A3    }
                 ; 0000 00A4 }
                 ;
                 ;void main()
                 ; 0000 00A7 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00A8     char flag_op = 0;
                 ; 0000 00A9     int op1=0, op2=0;
                 ; 0000 00AA     int count=0;
                 ; 0000 00AB     char Operator = 'n';
                 ; 0000 00AC 
                 ; 0000 00AD     DDRB=0xFF;
0000eb 9722      	SBIW R28,2
0000ec e0e0      	LDI  R30,LOW(0)
0000ed 83e8      	ST   Y,R30
0000ee 83e9      	STD  Y+1,R30
                 ;	flag_op -> R17
                 ;	op1 -> R18,R19
                 ;	op2 -> R20,R21
                 ;	count -> Y+0
                 ;	Operator -> R16
0000ef e010      	LDI  R17,0
                +
0000f0 e020     +LDI R18 , LOW ( 0 )
0000f1 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0000f2 e040     +LDI R20 , LOW ( 0 )
0000f3 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0000f4 e60e      	LDI  R16,110
0000f5 efef      	LDI  R30,LOW(255)
0000f6 bbe7      	OUT  0x17,R30
                 ; 0000 00AE     DDRD=0x0F;
0000f7 e0ef      	LDI  R30,LOW(15)
0000f8 bbe1      	OUT  0x11,R30
                 ; 0000 00AF 
                 ; 0000 00B0     init_LCD();
0000f9 df5b      	RCALL _init_LCD
                 ; 0000 00B1 
                 ; 0000 00B2 /*cmd(0x83);
                 ; 0000 00B3 string1("WELCOMWE TO");
                 ; 0000 00B4 cmd(0xPORTD.7);
                 ; 0000 00B5 string1("EMR CLUB");
                 ; 0000 00B6 delay_ms(100);
                 ; 0000 00B7 */
                 ; 0000 00B8     cmd(0x01);
0000fa d01e      	RCALL SUBOPT_0x1
                 ; 0000 00B9     cmd(0x80);
0000fb e8a0      	LDI  R26,LOW(128)
0000fc df4c      	RCALL _cmd
                 ; 0000 00BA     lcd1('3');
0000fd e3a3      	LDI  R26,LOW(51)
0000fe df50      	RCALL _lcd1
                 ; 0000 00BB     delay_ms(20);
0000ff e1a4      	LDI  R26,LOW(20)
000100 e0b0      	LDI  R27,0
000101 d01c      	RCALL _delay_ms
                 ; 0000 00BC     cmd(0x01);
000102 d016      	RCALL SUBOPT_0x1
                 ; 0000 00BD     cmd(0x80);
000103 e8a0      	LDI  R26,LOW(128)
000104 df44      	RCALL _cmd
                 ; 0000 00BE /* while(1)
                 ; 0000 00BF  {
                 ; 0000 00C0   char ch = get_key();
                 ; 0000 00C1     if(IsDigit(ch))
                 ; 0000 00C2     {
                 ; 0000 00C3         if(flag_op == 0)
                 ; 0000 00C4         {
                 ; 0000 00C5           op1 = pow(10,count)*op1 + (int)(ch);
                 ; 0000 00C6           count = count + 1;
                 ; 0000 00C7         }
                 ; 0000 00C8         else
                 ; 0000 00C9         {
                 ; 0000 00CA           op2 = pow(10,count)*op2 + (int)(ch);
                 ; 0000 00CB           count = count + 1;
                 ; 0000 00CC         }
                 ; 0000 00CD     }
                 ; 0000 00CE     else if(IsOperator(ch))
                 ; 0000 00CF     {
                 ; 0000 00D0        if(flag_op==1) continue;
                 ; 0000 00D1 
                 ; 0000 00D2        count=0;
                 ; 0000 00D3        Operator = ch;
                 ; 0000 00D4        flag_op = 1;
                 ; 0000 00D5     }
                 ; 0000 00D6     else if(IsClear(ch))
                 ; 0000 00D7     {
                 ; 0000 00D8       flag_op = 0;
                 ; 0000 00D9       cmd(0x01);
                 ; 0000 00DA       Operator = 'n';
                 ; 0000 00DB     }
                 ; 0000 00DC     else if(Operator!='n' && ch=='C' && flag_op==1)
                 ; 0000 00DD     {
                 ; 0000 00DE       Calculate(op1, op2, Operator);
                 ; 0000 00DF     }
                 ; 0000 00E0  }*/
                 ; 0000 00E1   while(1)
                 _0x8E:
                 ; 0000 00E2   {
                 ; 0000 00E3     char ch = get_key();
                 ; 0000 00E4     lcd1(ch);
000105 9721      	SBIW R28,1
                 ;	count -> Y+1
                 ;	ch -> Y+0
000106 dfda      	RCALL _get_key
000107 83e8      	ST   Y,R30
000108 81a8      	LD   R26,Y
000109 df45      	RCALL _lcd1
                 ; 0000 00E5     delay_ms(100);
00010a e6a4      	LDI  R26,LOW(100)
00010b e0b0      	LDI  R27,0
00010c d011      	RCALL _delay_ms
                 ; 0000 00E6     cmd(0x01);
00010d d00b      	RCALL SUBOPT_0x1
                 ; 0000 00E7   }
00010e 9621      	ADIW R28,1
00010f cff5      	RJMP _0x8E
                 ; 0000 00E8 
                 ; 0000 00E9 }
                 _0x91:
000110 cfff      	RJMP _0x91
                 ; .FEND
                 ;
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __seed_G101:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
000111 bb18      	OUT  0x18,R17
000112 e0a5      	LDI  R26,LOW(5)
000113 e0b0      	LDI  R27,0
000114 d009      	RCALL _delay_ms
000115 98a8      	CBI  0x15,0
000116 e0a5      	LDI  R26,LOW(5)
000117 e0b0      	LDI  R27,0
000118 c005      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000119 e0a1      	LDI  R26,LOW(1)
00011a cf2e      	RJMP _cmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:28 WORDS
                 SUBOPT_0x2:
00011b e0aa      	LDI  R26,LOW(10)
00011c e0b0      	LDI  R27,0
00011d c000      	RJMP _delay_ms
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 _delay_ms:
00011e 9610      	adiw r26,0
00011f f039      	breq __delay_ms1
                 __delay_ms0:
000120 95a8      	wdr
                +
000121 ea80     +LDI R24 , LOW ( 0xFA0 )
000122 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000123 9701     +SBIW R24 , 1
000124 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
000125 9711      	sbiw r26,1
000126 f7c9      	brne __delay_ms0
                 __delay_ms1:
000127 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   1 r17:  12 r18:   1 r19:   1 r20:   1 r21:   1 r22:   2 r23:   0 
r24:   9 r25:   3 r26:  21 r27:   7 r28:   4 r29:   1 r30:  41 r31:   3 
x  :   3 y  :   8 z  :   7 
Registers used: 20 out of 35 (57.1%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   2 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   6 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   6 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   2 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 
cpc   :   0 cpi   :   1 cpse  :   0 dec   :   1 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 
inc   :   0 ld    :   2 ldd   :   0 ldi   :  59 lds   :   0 lpm   :   7 
lsl   :   0 lsr   :   0 mov   :   4 movw  :   3 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :   9 
pop   :   0 push  :   0 rcall :  36 ret   :  20 reti  :   0 rjmp  :  61 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :  15 sbic  :  16 
sbis  :  16 sbiw  :   7 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   8 std   :   1 
sts   :   0 sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   1 

Instructions used: 24 out of 114 (21.1%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000250    572     20    592    8192   7.2%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 2 warnings
