;/*******************************************************
;This program was created by the CodeWizardAVR V3.24
;Automatic Program Generator
;© Copyright 1998-2015 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : To design a calulator using a microcontroller, lcd and keypad.
;Version :
;Date    : 02-09-2017
;Author  : Damodar Mahto
;Company : NIT Kurukshetra
;Comments:
;************************ Header files and Macros *******************************/
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <mega8.h>
;#include <math.h>
;#define F_XTAL 12000000L
;
;#define E PORTC.0           //enable pin of LCD
;#define RS PORTC.1          //Register Select pin of LCD
;
;#define RowA PORTD.0        //to send the data to keypad
;#define RowB PORTD.1
;#define RowC PORTD.2
;#define RowD PORTD.3
;
;#define Col1 PIND.4        //to receive the data from keypad
;#define Col2 PIND.5
;#define Col3 PIND.6
;#define Col4 PIND.7
;/**************************** Global variables *****************************/
;
;
;/**************************** LCD functions *****************************/
;
;void lcd_cmd(char a)
; 0000 0027 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0028     E=1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	a -> R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0029     RS=0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 002A     PORTB=a;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 002B     delay_ms(5);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002C     E=0;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002D     delay_ms(5);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 002E }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;
;void lcd_data(char b)
; 0000 0031 {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0032     E=1;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;	b -> R17
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0033     RS=1;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0034     PORTB =b;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0035     delay_ms(5);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0036     E=0;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0037     delay_ms(5);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0038 }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;
;void print_string(char *str)
; 0000 003B {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 003C      while(*str!='\0')
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;	*str -> R16,R17
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 003D      {
; 0000 003E       lcd_data(*str);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 003F       str++;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0040      }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0041 }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;
;void init_LCD()
; 0000 0044 {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0045 
; 0000 0046   lcd_cmd(0x38);        //LCD initialization
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0047   lcd_cmd(0x0c);        //display on cursor off
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0048   lcd_cmd(0x01);        //clear display screen
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0049   lcd_cmd(0x06);        //shift
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 004A   lcd_cmd(0x02);        //return to home
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 004B }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;
;void port_init()
; 0000 004E {
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 004F     DDRB=0xFF;    //LCD
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0050     DDRC=0XFF;    //LCD
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0051     DDRD=0x0F;    //Keypad ( upper nibble-in, lower nibble-out )
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0052 }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;
;/**************************** Keypad functions *****************************/
;
;char READ_SWITCHES(void)
; 0000 0057 {
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0058     RowA = 1; RowB = 0; RowC = 0; RowD = 0;     //Test Row A
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0059     if (Col1 == 1) { delay_ms(10); while (Col1==1); return '7'; }
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 005A     if (Col2 == 1) { delay_ms(10); while (Col2==1); return '8'; }
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 005B     if (Col3 == 1) { delay_ms(10); while (Col3==1); return '9'; }
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 005C     if (Col4 == 1) { delay_ms(10); while (Col4==1); return '/'; }
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 005D 
; 0000 005E     RowA = 0; RowB = 1; RowC = 0; RowD = 0;     //Test Row B
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 005F     if (Col1==1) { delay_ms(10); while (Col1==1); return '4'; }
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0060     if (Col2==1) { delay_ms(10); while (Col2==1); return '5'; }
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0061     if (Col3==1) { delay_ms(10); while (Col3==1); return '6'; }
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0062     if (Col4==1) { delay_ms(10); while (Col4==1); return '*'; }
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0063 
; 0000 0064     RowA = 0; RowB = 0; RowC = 1; RowD = 0;     //Test Row C
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0065     if (Col1==1) { delay_ms(10); while (Col1==1); return '1'; }
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0066     if (Col2==1) { delay_ms(10); while (Col2==1); return '2'; }
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0067     if (Col3==1) { delay_ms(10); while (Col3==1); return '3'; }
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0068     if (Col4==1) { delay_ms(10); while (Col4==1); return '-'; }
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0069 
; 0000 006A     RowA = 0; RowB = 0; RowC = 0; RowD = 1;     //Test Row D
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 006B     if (Col1==1) { delay_ms(10); while (Col1==1); return 'C'; }
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 006C     if (Col2==1) { delay_ms(10); while (Col2==1); return '0'; }
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 006D     if (Col3==1) { delay_ms(10); while (Col3==1); return '='; }
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 006E     if (Col4==1) { delay_ms(10); while (Col4==1); return '+'; }
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 006F 
; 0000 0070     return 'n';               // Means no key has been pressed
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0071 }
;PCODE: $00000176 VOL: 0
;
;
;char get_key(void)           //get key from user
; 0000 0075 {
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 0076     char key = 'n';              //assume no key pressed
; 0000 0077 
; 0000 0078     while(key=='n')              //wait untill a key is pressed
;PCODE: $00000179 VOL: 0
;	key -> R17
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0079     {
; 0000 007A       key = READ_SWITCHES();   //scan the keys again and again
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 007B     }
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 007C         lcd_data(key);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 007D         delay_ms(20);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 007E     return key;                  //when key pressed then return its value
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 007F }
;PCODE: $0000018C VOL: 0
;
;/**************************** Calculator related functions**************************/
;
;char IsOperator(char ch)
; 0000 0084 {
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0085   if(ch == '*' || ch=='+' || ch=='/' || ch=='-')
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;	ch -> R17
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 0086     return 1;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 0087   else
;PCODE: $000001A2 VOL: 0
; 0000 0088     return '\0';
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0089 }
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;
;char IsDigit(char ch)
; 0000 008C {
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 008D   if(ch>=48 && ch<=57)
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;	ch -> R17
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 008E    return 1;
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 008F   else
;PCODE: $000001BB VOL: 0
; 0000 0090    return '\0';
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 0091 }
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;
;char IsClear(char ch)
; 0000 0094 {
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 0095   if(ch=='C')
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;	ch -> R17
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 0096    return 1;
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 0097   else
;PCODE: $000001CD VOL: 0
; 0000 0098    return '\0';
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0099 }
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;
;void print_result(int res)
; 0000 009C {
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 009D   char pos = 0xCF;
; 0000 009E   lcd_cmd(pos);
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;	res -> R18,R19
;	pos -> R17
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 009F    if(res==0)
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 00A0    {
; 0000 00A1      lcd_data('0');
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 00A2    }
; 0000 00A3 
; 0000 00A4    while(res!=0)
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 00A5    {
; 0000 00A6      lcd_data(res%10 + '0');
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 00A7      pos = pos - 1;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 00A8      res = res/10;
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 00A9      lcd_cmd(pos);
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 00AA    }
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 00AB }
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;
;void Calculate(int op1, int op2, char Operation)
; 0000 00AE {
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 00AF    int res=0;
; 0000 00B0    if(Operation == '+')
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;	op1 -> Y+8
;	op2 -> R20,R21
;	Operation -> R19
;	res -> R16,R17
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 00B1     res = op1+op2;
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 00B2    else if(Operation == '-')
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 00B3     res = op1-op2;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 00B4    else if(Operation == '*')
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 00B5     res = op1*op2;
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 00B6    else if(Operation == '/')
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 00B7     res = op1/op2;
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 00B8    else
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 00B9    res=op1;
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 00BA    print_result(res);
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 00BB }
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;
;/**************************** Main and other functions *****************************/
;
;void device_init()
; 0000 00C0 {
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 00C1     port_init();
;PCODE: $00000232 VOL: 0
; 0000 00C2     init_LCD();
;PCODE: $00000233 VOL: 0
; 0000 00C3 }
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;
;void print_welcome_msg()
; 0000 00C6 {
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 00C7     lcd_cmd(0x83);
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 00C8     print_string("WELCOME TO");
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 00C9     lcd_cmd(0xC5);
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 00CA     print_string("EMR CLUB");
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 00CB     delay_ms(20);
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 00CC }
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0

	.DSEG
_0x8B:
	.BYTE 0x14
;
;
;void main()
; 0000 00D0 {

	.CSEG
;PCODE: $00000247 VOL: 0
; 0000 00D1     char flag_op = 0;
; 0000 00D2     int op1=0, op2=0;
; 0000 00D3     char Operator = 'n';
; 0000 00D4 
; 0000 00D5     device_init();
;	flag_op -> R17
;	op1 -> R18,R19
;	op2 -> R20,R21
;	Operator -> R16
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 00D6    // print_welcome_msg();
; 0000 00D7     lcd_cmd(0x01);
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 00D8     lcd_cmd(0x80);
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 00D9   while(1)
;PCODE: $00000255 VOL: 0
; 0000 00DA   {
; 0000 00DB      char ch = get_key();
; 0000 00DC      if(IsDigit(ch))
;PCODE: $00000256 VOL: 0
;	ch -> Y+0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 00DD     {
; 0000 00DE         if(flag_op == 0)
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 00DF         {
; 0000 00E0           op1 = 10*op1 + (ch - '0');
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 00E1         }
; 0000 00E2         else
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 00E3         {
; 0000 00E4           op2 = 10*op2 + (ch - '0');
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 00E5         }
;PCODE: $00000273 VOL: 0
; 0000 00E6     }
; 0000 00E7     else if(IsOperator(ch))
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 00E8     {
; 0000 00E9        if(flag_op==1){ lcd_cmd(0x01); lcd_cmd(0x80); print_string("Invalid Input");continue;}
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 00EA 
; 0000 00EB        Operator = ch;
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 00EC        flag_op = 1;
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 00ED     }
; 0000 00EE     else if(IsClear(ch))
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0000 00EF     {
; 0000 00F0       flag_op = 0;
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 00F1       lcd_cmd(0x01);
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 00F2       lcd_cmd(0x80);
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 00F3       Operator = 'n';
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 00F4     }
; 0000 00F5     else if(ch=='=')
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 00F6     {
; 0000 00F7       Calculate(op1, op2, Operator);
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 00F8 	  op1=0;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 00F9 	  op2=0;
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 00FA 	  Operator='n';
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 00FB     }
; 0000 00FC  }
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0000 00FD }
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0

	.DSEG
_0x95:
	.BYTE 0xE
;
;
